name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21, 1.22]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Run Go vulnerability check
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Run security linting
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --enable=gosec,gocritic --disable-all --timeout=5m

    - name: Check for hardcoded secrets
      run: |
        # Check for common secret patterns
        if grep -r -i -E "(password|api[_-]?key|secret|token)\s*=\s*['\"][^'\"]*['\"]" --include="*.go" --include="*.yml" --include="*.yaml" .; then
          echo "⚠️ Potential hardcoded secrets found"
          exit 1
        fi
        echo "✅ No hardcoded secrets detected"

    - name: Dependency vulnerability scan
      run: |
        # Check for known vulnerable dependencies
        go list -json -deps ./... | jq -r '.Module | select(.Path != null) | .Path + "@" + .Version' | sort -u > deps.txt
        echo "📦 Dependencies scanned for vulnerabilities"
        
    - name: Generate security report
      if: always()
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Generated: $(date)" >> security-report.md
        echo "" >> security-report.md
        echo "## Go Version" >> security-report.md
        go version >> security-report.md
        echo "" >> security-report.md
        echo "## Dependencies" >> security-report.md
        go list -m all >> security-report.md
        
    - name: Upload security report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md

  build:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        if [ "$GOOS" = "windows" ]; then
          go build -o dist/wtf-${{ matrix.goos }}-${{ matrix.goarch }}.exe ./cmd/wtf
        else
          go build -o dist/wtf-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/wtf
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wtf-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/