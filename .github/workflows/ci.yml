name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24.5'

jobs:
  # Pre-checks for fast feedback
  pre-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Check formatting (gofmt)
        shell: bash
        run: |
          fmt_out=$(gofmt -l .)
          if [ -n "$fmt_out" ]; then
            echo "‚ùå The following files are not gofmt formatted:"
            echo "$fmt_out"
            echo ""
            echo "üí° Run 'gofmt -w .' to fix formatting issues"
            exit 1
          fi
          echo "‚úÖ All files are properly formatted"

      - name: Go vet
        run: |
          echo "üîç Running go vet..."
          go vet ./...
          echo "‚úÖ go vet passed"

      - name: Module verification
        run: |
          echo "üîç Verifying module integrity..."
          go mod verify
          echo "‚úÖ Module verification passed"

      - name: Module tidy check
        shell: bash
        run: |
          echo "üîç Checking if go.mod and go.sum are tidy..."
          go mod tidy
          git update-index -q --refresh
          if ! git diff --quiet -- go.mod go.sum; then
            echo "‚ùå go.mod or go.sum changed after tidy:"
            git --no-pager diff -- go.mod go.sum
            echo ""
            echo "üí° Run 'go mod tidy' locally and commit the changes"
            exit 1
          fi
          echo "‚úÖ go.mod and go.sum are tidy"

  # Comprehensive testing across platforms
  test:
    runs-on: ${{ matrix.os }}
    needs: pre-checks
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.24.5']
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests with race detection
        shell: bash
        run: |
          echo "üß™ Running tests on ${{ matrix.os }}..."
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Windows: race detector requires CGO
            echo "‚ö†Ô∏è  Running tests without race detector on Windows (requires CGO)"
            go test -v -coverprofile=coverage.out ./...
          else
            # Unix: run with race detector
            go test -v -race -coverprofile=coverage.out ./...
          fi
          echo "‚úÖ Tests completed successfully"

      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "üìä Generating coverage report..."
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          files: ./coverage.out
          use_oidc: true
          fail_ci_if_error: false
          verbose: true

      - name: Check coverage threshold
        if: matrix.os == 'ubuntu-latest'
        env:
          COVERAGE_MIN: "75"
        shell: bash
        run: |
          echo "üìä Checking coverage threshold..."
          total=$(go tool cover -func=coverage.out | awk '/total:/ {print $3}' | sed 's/%//')
          echo "Current coverage: ${total}%"
          min=${COVERAGE_MIN:-75}
          
          if awk -v t="$total" -v m="$min" 'BEGIN { exit (t+0 < m+0) }'; then
            echo "‚úÖ Coverage ${total}% meets minimum requirement of ${min}%"
          else
            echo "‚ùå Coverage ${total}% is below minimum requirement of ${min}%"
            echo ""
            echo "üí° Add more tests to improve coverage"
            exit 1
          fi

      - name: Upload coverage artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html
          retention-days: 30

  # Code quality and linting
  lint:
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Install golangci-lint
        run: |
          echo "üì¶ Installing golangci-lint..."
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          echo "‚úÖ golangci-lint installed"

      - name: Run golangci-lint
        run: |
          echo "üîç Running golangci-lint with comprehensive checks..."
          "$(go env GOPATH)/bin/golangci-lint" run --timeout=10m --verbose
          echo "‚úÖ Linting completed successfully"

      - name: Check for TODO/FIXME comments
        shell: bash
        run: |
          echo "üîç Checking for TODO/FIXME comments..."
          todos=$(grep -r -n "TODO\|FIXME" --include="*.go" . || true)
          if [ -n "$todos" ]; then
            echo "üìù Found TODO/FIXME comments:"
            echo "$todos"
            echo ""
            echo "‚ÑπÔ∏è  This is informational - consider addressing these items"
          else
            echo "‚úÖ No TODO/FIXME comments found"
          fi

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Install security tools
        run: |
          echo "üì¶ Installing security scanning tools..."
          go install golang.org/x/vuln/cmd/govulncheck@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          sudo apt-get update && sudo apt-get install -y jq
          echo "‚úÖ Security tools installed"

      - name: Run vulnerability scan
        run: |
          echo "üîç Running vulnerability scan..."
          if "$(go env GOPATH)/bin/govulncheck" ./...; then
            echo "‚úÖ No vulnerabilities found"
          else
            echo "‚ùå Vulnerabilities detected"
            echo ""
            echo "üí° Review and update dependencies to fix vulnerabilities"
            exit 1
          fi

      - name: Run security linting
        run: |
          echo "üîç Running security-focused linting..."
          "$(go env GOPATH)/bin/golangci-lint" run \
            --timeout=10m \
            --disable-all \
            --enable=gosec \
            --enable=gocritic \
            --verbose
          echo "‚úÖ Security linting completed"

      - name: Check for hardcoded secrets
        shell: bash
        run: |
          echo "üîç Scanning for potential hardcoded secrets..."
          secrets_found=false
          
          # Define patterns to check
          patterns=(
            "password\s*[:=]\s*['\"][^'\"]{8,}['\"]"
            "api[_-]?key\s*[:=]\s*['\"][^'\"]{16,}['\"]"
            "secret\s*[:=]\s*['\"][^'\"]{16,}['\"]"
            "token\s*[:=]\s*['\"][^'\"]{16,}['\"]"
          )
          
          for pattern in "${patterns[@]}"; do
            if grep -r -i -E "$pattern" --include="*.go" --include="*.yml" --include="*.yaml" .; then
              secrets_found=true
            fi
          done
          
          if [ "$secrets_found" = true ]; then
            echo "‚ùå Potential hardcoded secrets found"
            echo ""
            echo "üí° Remove hardcoded secrets and use environment variables or secure storage"
            exit 1
          else
            echo "‚úÖ No hardcoded secrets detected"
          fi

      - name: Generate security report
        if: always()
        run: |
          echo "üìã Generating security report..."
          {
            echo "# Security Scan Report"
            echo "Generated: $(date)"
            echo ""
            echo "## Go Version"
            go version
            echo ""
            echo "## Dependencies"
            go list -m all
            echo ""
            echo "## Vulnerability Scan Status"
            if "$(go env GOPATH)/bin/govulncheck" ./... >/dev/null 2>&1; then
              echo "‚úÖ No vulnerabilities found"
            else
              echo "‚ùå Vulnerabilities detected - see CI logs"
            fi
          } > security-report.md
          echo "‚úÖ Security report generated"

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

  # Cross-platform build testing
  build:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          echo "üî® Building for ${{ matrix.goos }}/${{ matrix.goarch }}..."
          mkdir -p dist
          
          # Set binary name with proper extension
          binary_name="wtf-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            binary_name="${binary_name}.exe"
          fi
          
          # Build with optimizations
          go build \
            -trimpath \
            -ldflags="-s -w -X github.com/Vedant9500/WTF/internal/version.Version=$(git describe --tags --always --dirty)" \
            -o "dist/${binary_name}" \
            ./cmd/wtf
          
          echo "‚úÖ Built ${binary_name}"

      - name: Test binary execution
        if: matrix.goos == 'linux' && matrix.goarch == 'amd64'
        run: |
          echo "üß™ Testing binary execution..."
          ./dist/wtf-linux-amd64 --version
          echo "‚úÖ Binary execution test passed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wtf-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/
          retention-days: 30

  # Performance benchmarks
  benchmark:
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run benchmarks
        run: |
          echo "‚ö° Running performance benchmarks..."
          go test -run=^$ -bench=. -benchmem -count=3 ./... | tee bench.txt
          echo "‚úÖ Benchmarks completed"

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: bench.txt
          retention-days: 30

  # Final status check
  ci-success:
    runs-on: ubuntu-latest
    needs: [pre-checks, test, lint, security, build, benchmark]
    if: always()
    steps:
      - name: Check CI status
        run: |
          echo "üîç Checking overall CI status..."
          
          # Check if any required job failed
          if [ "${{ needs.pre-checks.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "‚ùå CI failed - one or more required jobs failed"
            echo ""
            echo "Job status:"
            echo "  Pre-checks: ${{ needs.pre-checks.result }}"
            echo "  Test: ${{ needs.test.result }}"
            echo "  Lint: ${{ needs.lint.result }}"
            echo "  Security: ${{ needs.security.result }}"
            echo "  Build: ${{ needs.build.result }}"
            echo "  Benchmark: ${{ needs.benchmark.result }}"
            exit 1
          fi
          
          echo "‚úÖ All CI checks passed successfully!"
          echo ""
          echo "üéâ Code is ready for deployment!"